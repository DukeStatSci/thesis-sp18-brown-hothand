model <- function(){
# N observations
for(i in 1:N){
result[i] ~ dbern(prob[i])
logit(prob[i]) <- beta_int*int[i]*e_int[player[i]] + beta_r*logr[i]*e_r[player[i]] + beta_theta*theta[i]*e_theta[player[i]] # a random 'e' here or is that implied?
}
# priors on random player effects
for (j in 1:M) {
e_int[j] ~ dnorm(0,tau)
e_r[j] ~ dnorm(0,tau)
e_theta[j] ~ dnorm(0,tau)
}
# Priors
beta_int   ~ dnorm(0.0,1.0E-6)
beta_r     ~ dnorm(0.0,1.0E-6)
beta_theta ~ dnorm(0.0,1.0E-6)
# Hyperpriors
tau ~ dgamma(0.1,0.1)
}
datlist <- list(
#logr = allgameshots$logr,
#theta = allgameshots$theta,
result = allgameshots$result,
#player = as.integer(as.factor(allgameshots$globalplayerid))
N = nrow(allgameshots),
int = rep(1, nrow(allgameshots)),
M = n_distinct(allgameshots$globalplayerid)
)
sim <- jags(data = datlist,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=model
)
datlist <- list(
logr = allgameshots$logr,
theta = allgameshots$theta,
result = allgameshots$result,
player = as.integer(as.factor(allgameshots$globalplayerid)),
N = nrow(allgameshots),
int = rep(1, nrow(allgameshots)),
M = n_distinct(allgameshots$globalplayerid)
)
sim <- jags(data = datlist,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=model
)
datlist$logr
datlist <- list(
logr = allgameshots$logr,
theta = allgameshots$theta,
result = allgameshots$result,
player = as.integer(as.factor(allgameshots$globalplayerid)),
N = nrow(allgameshots),
int = rep(1, nrow(allgameshots)),
M = n_distinct(allgameshots$globalplayerid)
)
datlist <- list(
logr = log(allgameshots$r),
theta = allgameshots$theta,
result = allgameshots$result,
player = as.integer(as.factor(allgameshots$globalplayerid)),
N = nrow(allgameshots),
int = rep(1, nrow(allgameshots)),
M = n_distinct(allgameshots$globalplayerid)
)
hist(datlist$logr)
params <- c("beta_int","beta_r", "beta_theta", "e_int","e_r","e_theta","prob")
sim <- jags(data = datlist,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=model
)
gameenv <- new.env()
load(paste0(datafolder,"/game", gameid, ".RData"), envir = gameenv)
head(allgameshots)
allgameshots[["gameid"]][9835]
allgameshots[["gameid"]][983]
allgameshots[["gameid"]][983] -> gameid
dim(allgameshots)
load(paste0(datafolder,"/game", gameid, ".RData"), envir = gameenv)
game <- gameenv[[1]]
gameenv
gameenv[[1]]
gameenv[[2]]
gameenv$game
sim.mcmc <- as.data.frame(as.mcmc(sim)[[1]])
View(sim.mcmc)
hist(sim.mcmc[["prob[1]"]])
setwd("C:/Users/Nathaniel Brown/Documents/GitHub/thesis-sp18-brown-hothand")
save(sim.mcmc, file="simmcmc.RData")
ls(gameenv)
load(paste0(datafolder,"/game", gameid, ".RData"))
dim(game)
unique(game$time)
dim(allgameshots)
allgameshots %>% group_by(gameid) %>% summarize(len = max(time) - min(time)) %>% View()
allgameshots %>% group_by(gameid) %>% summarize(len = (max(time) - min(time))/40) %>% View()
allgameshots %>% group_by(gameid) %>% summarize(len = (max(time) - min(time))/4000) %>% View()
allgameshots %>% group_by(gameid) %>% summarize(len = (max(time) - min(time))) %>% View()
allgameshots %>% group_by(gameid) %>% summarize(len = (max(time) - min(time))/6000000) %>% View()
25*60*40
25*60*40*10
25*60*40*100
model <- function(){
# N observations
for(i in 1:N){
result[i] ~ dbern(prob[i])
logit(prob[i]) <- beta_int*int[i] + e_int[player[i]] + beta_r*logr[i] + e_r[player[i]] + beta_theta*theta[i] + e_theta[player[i]] # a random 'e' here or is that implied?
}
# priors on random player effects
for(j in 1:M){
e_int[j] ~ dnorm(beta_int,tau)
e_r[j] ~ dnorm(beta_r,tau)
e_theta[j] ~ dnorm(beta_theta,tau)
}
# Priors
beta_int   ~ dnorm(0.0,1.0E-6)
beta_r     ~ dnorm(0.0,1.0E-6)
beta_theta ~ dnorm(0.0,1.0E-6)
# Hyperpriors
tau ~ dgamma(0.1,0.1)
}
datlist <- list(
logr = log(allgameshots$r),
theta = allgameshots$theta,
result = allgameshots$result,
player = as.integer(as.factor(allgameshots$globalplayerid)),
N = nrow(allgameshots),
int = rep(1, nrow(allgameshots)),
M = n_distinct(allgameshots$globalplayerid)
)
params <- c("beta_int","beta_r", "beta_theta", "e_int","e_r","e_theta","prob")
sim <- jags(data = datlist,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=model
)
sim.mcmc <- as.data.frame(as.mcmc(sim)[[1]])
plot(x,dgamma(x=x,shape=.1,scale=1/.001))
save(file="simmcmc.RData", sim.mcmc)
hist(sim.mcmc[,"e_int[1]"])
hist(sim.mcmc[,"e_int[3]"])
hist(sim.mcmc[,"e_int[25]"])
hist(sim.mcmc[,"e_int[5]"])
colMeans(sim.mcmc)
dim(sim.mcmc)
colMeans(sim.mcmc)[5+1:34]
colMeans(sim.mcmc)[5+(1:34)]
hist(sim.mcmc[,"e_int[9]"])
model <- function(){
# N observations
for(i in 1:N){
result[i] ~ dbern(prob[i])
logit(prob) <- beta_int*int[i] + e_int[player[i]] + beta_r*logr[i] + e_r[player[i]] + beta_theta*theta[i] + e_theta[player[i]] # a random 'e' here or is that implied?
}
# priors on random player effects
for(j in 1:M){
e_int[j] ~ dnorm(beta_int,tau)
e_r[j] ~ dnorm(beta_r,tau)
e_theta[j] ~ dnorm(beta_theta,tau)
}
# Priors
beta_int   ~ dnorm(0.0,1.0E-6)
beta_r     ~ dnorm(0.0,1.0E-6)
beta_theta ~ dnorm(0.0,1.0E-6)
# Hyperpriors
tau ~ dgamma(0.1,0.1)
}
sim <- jags(data = datlist,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=model
)
model <- function(){
# N observations
for(i in 1:N){
result[i] ~ dbern(prob)
logit(prob) <- beta_int*int[i] + e_int[player[i]] + beta_r*logr[i] + e_r[player[i]] + beta_theta*theta[i] + e_theta[player[i]] # a random 'e' here or is that implied?
}
# priors on random player effects
for(j in 1:M){
e_int[j] ~ dnorm(beta_int,tau)
e_r[j] ~ dnorm(beta_r,tau)
e_theta[j] ~ dnorm(beta_theta,tau)
}
# Priors
beta_int   ~ dnorm(0.0,1.0E-6)
beta_r     ~ dnorm(0.0,1.0E-6)
beta_theta ~ dnorm(0.0,1.0E-6)
# Hyperpriors
tau ~ dgamma(0.1,0.1)
}
datlist <- list(
logr = log(allgameshots$r),
theta = allgameshots$theta,
result = allgameshots$result,
player = as.integer(as.factor(allgameshots$globalplayerid)),
N = nrow(allgameshots),
int = rep(1, nrow(allgameshots)),
M = n_distinct(allgameshots$globalplayerid)
)
sim <- jags(data = datlist,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=model
)
model <- function(){
# N observations
for(i in 1:N){
result[i] ~ dbern(prob[i])
logit(prob[i]) ~ beta_int*int[i] + e_int[player[i]] + beta_r*logr[i] + e_r[player[i]] + beta_theta*theta[i] + e_theta[player[i]] # a random 'e' here or is that implied?
}
# priors on random player effects
for(j in 1:M){
e_int[j] ~ dnorm(beta_int,tau)
e_r[j] ~ dnorm(beta_r,tau)
e_theta[j] ~ dnorm(beta_theta,tau)
}
# Priors
beta_int   ~ dnorm(0.0,1.0E-6)
beta_r     ~ dnorm(0.0,1.0E-6)
beta_theta ~ dnorm(0.0,1.0E-6)
# Hyperpriors
tau ~ dgamma(0.1,0.1)
}
sim <- jags(data = datlist,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=model
)
model <- function(){
# N observations
for(i in 1:N){
result[i] ~ dbern(prob[i])
probb[i] <- invlogit(beta_int*int[i] + e_int[player[i]] + beta_r*logr[i] + e_r[player[i]] + beta_theta*theta[i] + e_theta[player[i]]) # a random 'e' here or is that implied?
prob ~ dnorm(probb, 1)
}
# priors on random player effects
for(j in 1:M){
e_int[j] ~ dnorm(beta_int,tau)
e_r[j] ~ dnorm(beta_r,tau)
e_theta[j] ~ dnorm(beta_theta,tau)
}
# Priors
beta_int   ~ dnorm(0.0,1.0E-6)
beta_r     ~ dnorm(0.0,1.0E-6)
beta_theta ~ dnorm(0.0,1.0E-6)
# Hyperpriors
tau ~ dgamma(0.1,0.1)
}
sim <- jags(data = datlist,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=model
)
model <- function(){
# N observations
for(i in 1:N){
result[i] ~ dbern(prob[i])
logit(prob[i]) <- beta_int*int[i] + e_int[player[i]] + beta_r*logr[i] + e_r[player[i]] + beta_theta*theta[i] + e_theta[player[i]] # a random 'e' here or is that implied?
}
# priors on random player effects
for(j in 1:M){
e_int[j] ~ dnorm(beta_int,tau)
e_r[j] ~ dnorm(beta_r,tau)
e_theta[j] ~ dnorm(beta_theta,tau)
}
# Priors
beta_int   ~ dnorm(0.0,1.0E-6)
beta_r     ~ dnorm(0.0,1.0E-6)
beta_theta ~ dnorm(0.0,1.0E-6)
# Hyperpriors
tau ~ dgamma(0.1,0.1)
}
sim <- jags(data = datlist,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=model
)
titanic_dir <- "C:/Users/Nathaniel Brown/Documents/important things/Kaggle/Titanic/"
train_OG <- read.csv(paste0(titanic_dir,"train.csv"), stringsAsFactors = FALSE)
test_OG <- read.csv(paste0(titanic_dir,"test.csv"), stringsAsFactors = FALSE)
answers_OG <- read.csv(paste0(titanic_dir,"answers.csv"), stringsAsFactors = FALSE)
test_OG$Survived <- NA
traintest_OG <- rbind(train_OG, test_OG) #combining them in order to make sure train sees all factor levels
traintest <-  traintest_OG %>%
mutate(
Order = 1:nrow(.),
Pclass = as.factor(Pclass),
Sex = as.factor(Sex),
SibSp = as.numeric(SibSp),
Parch = as.numeric(Parch),
Embarked = as.factor(Embarked),
NoFamily = (SibSp==0 & Parch==0),
CleanName = gsub(x=Name, pattern='\\"', replacement = ''),
Title = lapply(strsplit(Name, split="\\s+"), grep,  pattern="\\.\\b", value=TRUE) %>% lapply('[', 1) %>% as.character() %>% as.factor(),
#the title is the word that ends in a period. (Mr. Mrs. Dr. etc.)
LastName = lapply(strsplit(Name, split="\\s+"), '[', 1) %>% as.character() %>% gsub(replacement="",pattern=",")
#the last name is the first word to appear.
#FirstName = lapply(strsplit(Name, split=Title), '[', 2) %>% lapply(strsplit, split="\\s+") %>% lapply( '[[', 1) %>% lapply('[', 2) %>% as.character(),
#FirstName = ifelse(startsWith(FirstName, "("), "", FirstName)
#splits and applys to get the name following the title. if it starts with a parentheses then it's not the husband's first name and the only purpose of this is to find married couples
)
TicketSize <- traintest %>% group_by(Ticket) %>% summarize(TicketSize=n()) %>% as.data.frame()
marriedwomen <- c("Mrs.", "Lady.", "Mme.", "Countess.") #titles that may imply a married woman
unmarried <- c("Master.", "Miss.", "Mlle.", "Ms.") #titles that certainly imply single male/female
traintest <- merge(traintest,TicketSize, by="Ticket", all=TRUE) %>% arrange(Order) %>% select(-Order)
traintest[traintest==""] <- NA
train <- traintest[1:nrow(train_OG),]
test <- traintest[(1+nrow(train_OG)):nrow(traintest),]
answers <- answers_OG %>% mutate(
CleanName = gsub(x=name, pattern='\\"', replacement = '')
)
test_cheat <- merge(test, answers[,c("CleanName", "survived")], by="CleanName", all.x=TRUE) %>% arrange(PassengerId) %>% filter(!duplicated(.$PassengerId)) %>% mutate(Survived = survived)
split <- 15
traintest$Adult <- as.numeric(traintest$Age > split)
adult_train <- data.frame(Title = levels(traintest$Title))
x_adult_train <- train %>% group_by(Title) %>% summarize(x=sum(Age > split, na.rm=TRUE)) %>% as.data.frame()
n_adult_train <- train %>% group_by(Title) %>% summarize(n=n()) %>% as.data.frame()
adult_train <- merge(adult_train, x_adult_train, by="Title", all=TRUE) %>% merge(n_adult_train, by="Title", all = TRUE)
adult_train[is.na(adult_train)] <- 0
mod <- function()
{
for(j in 1:J){
#prob parameter from beta, mean parameter from normal, var parameter from gamma
p[j] ~ dbeta(a0, B0)                      #simulate probability
MU[j,1] ~ dnorm(theta0[1], tau0[1]^-2)    #simulate mean and var for adult and child
SIGMA2[j,1] ~ dgamma(k0[1], mu0[1])
MU[j,2] ~ dnorm(theta0[2], tau0[2]^-2)
SIGMA2[j,2] ~ dgamma(k0[2], mu0[2])
for(i in 1:n[j]){
z[j,i] ~ dbern(p[j]) #no if statements in BUGS, so we have to be creative about conditionally selecting from distributions
y[j,i] ~ dnorm(MU[j, z[j,i]+1], SIGMA2[j, z[j,i]+1]^-1) # sample the ith individual in the jth group
}
}
#the priors typically go here, but they're currently living in the outer loop.
#I'm pretty sure this is valid.
}
p <- ifelse(is.nan(adult_train$x/adult_train$n)|is.infinite(adult_train$x/adult_train$n), 0, adult_train$x/adult_train$n)
p[p == 0] <- 1E-6
p[p == 1] <- .999999
agemat <- array(-999, c(nrow(adult_train), max(adult_train$n)))
for(r in 1:nrow(adult_train)){
t <- as.character(adult_train[r,"Title"])
a <- train$Age[train$Title == t]
while(length(a) < ncol(agemat)){
a <- c(a, -999)
}
agemat[r,] <- a
}
dat <- list(n=adult_train$n, y = agemat,
z = apply(agemat, 2, '>', split) %>% apply(2, as.numeric),
#sigma2y? muy? you obviously need to incorporate sufficient statistics because your priors are too wacky.
theta0 = c(11, 30), tau0 = c(3,6),
k0 = c(2,6), mu0 = c(2, 1),
a0=1/2, B0=1/2)
dat[["J"]] <- length(dat$n)
params <- c("p", "MU", "SIGMA2")
sim <- jags(data = dat,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=mod
)
sim.mcmc <- as.data.frame(as.mcmc(sim)[[1]])
head(sim.mcmc)
model <- function(){
# N observations
for(i in 1:N){
result[i] ~ dbern(prob[i])
logit(prob[i]) <- beta_int*int[i] + e_int[player[i]] + beta_r*logr[i] + e_r[player[i]] + beta_theta*theta[i] + e_theta[player[i]] # a random 'e' here or is that implied?
}
# priors on random player effects
for(j in 1:M){
e_int[j] ~ dnorm(beta_int,tau)
e_r[j] ~ dnorm(beta_r,tau)
e_theta[j] ~ dnorm(beta_theta,tau)
}
# Priors
beta_int   ~ dnorm(0.0,1.0E-6)
beta_r     ~ dnorm(0.0,1.0E-6)
beta_theta ~ dnorm(0.0,1.0E-6)
# Hyperpriors
tau ~ dgamma(0.1,0.1)
}
params <- c("beta_int","beta_r", "beta_theta", "e_int","e_r","e_theta")
sim <- jags(data = datlist,
n.iter = 1000, n.chains = 1, n.burnin = 100,
#inits=list(list(p = rep(0.5, nrow(P0)))),
parameters.to.save = params,
model.file=model
)
sim.mcmc <- as.data.frame(as.mcmc(sim)[[1]])
View(sim.mcmc)
mean(sim.mcmc[["beta_int"]])
mean(sim.mcmc[["beta_r"]])
mean(sim.mcmc[["e_r[4]"]])
sim.results <- sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% Z[["logr"]] + sim.mcmc[["beta_theta"]] %*% Z[["theta"]]
sim.results <- sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% Z[["theta"]]
sim.mcmc[["beta_r"]] %*% t(Z[["logr"]])
sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]])
sim.results <- sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]])
hist(sim.results)
sim.results <- invlogit(sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]]))
sim.results <- arm::invlogit(sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]]))
hist(sim.results)
playerid
as.factor(allgameshots$globalplayerid) == playerid)
as.factor(allgameshots$globalplayerid) == playerid
as.factor(allgameshots$globalplayerid == playerid)
levels(as.factor(allgameshots$globalplayerid) == playerid
)
which(as.factor(allgameshots$globalplayerid) == playerid
)
which(as.factor(allgameshots$globalplayerid) == playerid) %>% length()
which((allgameshots$globalplayerid) == playerid) %>% length()
which(as.factor(allgameshots$globalplayerid) == id2) %>% length()
id2
which((allgameshots$globalplayerid) == playerid) %>% length()
(as.factor(allgameshots$globalplayerid)) %>% head()
level <- which(sort(unique(allgameshots$globalplayerid)) == playerid)
leve
level
sim.mcmc[[paste0("e_int[",level,"]")]]
paste0("e_int[",level,"]")
level <- which(sort(unique(allgameshots$globalplayerid)) == NA)
leve
level
indiv_effect <- sim.mcmc[[paste0("e_int[",level,"]")]] +
sim.mcmc[[paste0("e_r[",level,"]")]] +
sim.mcmc[[paste0("e_theta[",level,"]")]]
indiv_effect
indiv_effect <- sim.mcmc[[paste0("e_int[",level,"]")]] +
sim.mcmc[[paste0("e_r[",level,"]")]] +
sim.mcmc[[paste0("e_theta[",level,"]")]]
indiv_effect <- 0
sim.results <- arm::invlogit(sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]]) + indiv_effect)
hist(sim.results)
level <- which(sort(unique(allgameshots$globalplayerid)) == playerid)
indiv_effect <- sim.mcmc[[paste0("e_int[",level,"]")]] +
sim.mcmc[[paste0("e_r[",level,"]")]] +
sim.mcmc[[paste0("e_theta[",level,"]")]]
sim.results <- arm::invlogit(sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]]) + indiv_effect)
hist(sim.results)
mean(indiv_effect)
playerseason
Z <- allgameshots %>% filter(globalplayerid == playerid & season == playerseason) %>% mutate(logr = log(r) - mean(log(r))) %>% select(result, theta, logr)
level <- which(sort(unique(allgameshots$globalplayerid)) == playerid)
indiv_effect <- sim.mcmc[[paste0("e_int[",level,"]")]] +
sim.mcmc[[paste0("e_r[",level,"]")]] +
sim.mcmc[[paste0("e_theta[",level,"]")]]
sim.results <- arm::invlogit(sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]]) + indiv_effect)
hist(sim.results)
head(sim.results)
iniv_effect
indiv_effect
indiv_effect <- sim.mcmc[[paste0("e_int[",level,"]")]] +
sim.mcmc[[paste0("e_r[",level,"]")]] +
sim.mcmc[[paste0("e_theta[",level,"]")]]
level
indiv_effect <- sim.mcmc[[paste0("e_int[",level,"]")]] +
}
indiv_effect
sim.results <- arm::invlogit(sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]]) + indiv_effect)
hist(sim.results)
sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]])
sim.mcmc[["beta_int"]] +
0
head(Z)
id1 -> playerid
id
1
id1
id2 -> playerid
Z <- allgameshots %>% filter(globalplayerid == playerid & season == playerseason) %>% mutate(logr = log(r) - mean(log(r))) %>% select(result, theta, logr)
dim(Z)
level <- which(sort(unique(allgameshots$globalplayerid)) == playerid)
indiv_effect <- sim.mcmc[[paste0("e_int[",level,"]")]] +
sim.mcmc[[paste0("e_r[",level,"]")]] +
sim.mcmc[[paste0("e_theta[",level,"]")]]
sim.results <- arm::invlogit(sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]]) + indiv_effect)
hist(sim.results)
playerid
id1 -> playerid
playerid
playerseason <- 2017
Z <- allgameshots %>% filter(globalplayerid == playerid & season == playerseason) %>% mutate(logr = log(r) - mean(log(r))) %>% select(result, theta, logr)
level <- which(sort(unique(allgameshots$globalplayerid)) == playerid)
indiv_effect <- sim.mcmc[[paste0("e_int[",level,"]")]] +
sim.mcmc[[paste0("e_r[",level,"]")]] +
sim.mcmc[[paste0("e_theta[",level,"]")]]
if(is.na(playerid)){
indiv_effect <- 0
}
sim.results <- arm::invlogit(sim.mcmc[["beta_int"]] + sim.mcmc[["beta_r"]] %*% t(Z[["logr"]]) + sim.mcmc[["beta_theta"]] %*% t(Z[["theta"]]) + indiv_effect)
hist(sim.results)
indiv_effefct
indiv_effect
indiv_effect %>% mean()
levle
level
playerid
